import pandas as pd
import numpy as np
import argparse

def preprocessing():
	df = pd.read_csv('Gowalla_totalCheckins.txt', sep="\t", header=None)

	df.columns = ["user", "check-in time", "latitude", "longitude", "location id"]

	max_latitude =  df['latitude'].max()
	max_longitude = df['longitude'].max()
	min_latitude =  df['latitude'].min()
	min_longitude = df['longitude'].min()

	print(max_latitude)
	print(min_latitude)
	print(max_longitude)
	print(min_longitude)

	latitude_interval = (max_latitude - min_latitude) / 100.0
	longitude_interval = (max_longitude - min_longitude) / 100.0

	print(latitude_interval)
	print(longitude_interval)

	df["x coordinate"] = (df['latitude'] - min_latitude) // latitude_interval
	df["y coordinate"] = (df['longitude'] - min_longitude) // longitude_interval

	#print(df)

if __name__ == "__main__":

	parser = argparse.ArgumentParser(description = "Nearest neighbor search technique on grid-indexed data")

	parser.add_argument('-x', type=float, help = "latitude of query location q", required=True)
	parser.add_argument('-y', type=float, help = "longitude of query location q", required=True)
	parser.add_argument('-k', type=int, help = "integer k", required=True)

	args = parser.parse_args()

	#
	df = pd.read_csv('Gowalla_totalCheckins.txt', sep="\t", header=None)

	df.columns = ["user", "check-in time", "latitude", "longitude", "location id"]

	max_latitude =  df['latitude'].max()
	max_longitude = df['longitude'].max()
	min_latitude =  df['latitude'].min()
	min_longitude = df['longitude'].min()

	print("max_latitude", max_latitude)
	print("min_latitude", min_latitude)
	print("max_longitude", max_longitude)
	print("min_longitude", min_longitude)

	latitude_interval = (max_latitude - min_latitude) / 100.0
	longitude_interval = (max_longitude - min_longitude) / 100.0

	print("latitude_interval", latitude_interval)
	print("longitude_interval", longitude_interval)

	df["latitude_cell"] = (df['latitude'] - min_latitude) // latitude_interval
	df["longitude_cell"] = (df['longitude'] - min_longitude) // longitude_interval
	#
	#print(df)

	query_latitude = (args.x - min_latitude) // latitude_interval
	query_longitude = (args.y - min_longitude) // longitude_interval
	print("query_latitude", query_latitude)
	print("query_longitude", query_longitude)

	TargetSet = []
	t = float("inf")

	# q might not be in the grid
	for index, row in df.loc[(df['longitude_cell'] == query_longitude) & (df['latitude_cell'] == query_latitude)].iterrows():
			if len(TargetSet) < args.k:
				TargetSet.append(index)
				TargetSet.reverse()
				t = TargetSet[0]
			else:
				if (row['latitude'] - args.x)**2 + (row['longitude'] - args.y)**2 < t:
					TargetSet.remove(t)
					TargetSet.append(index)
					TargetSet.reverse()
					t = TargetSet[0]

