import numpy as np
import argparse
from rtree import index
from scipy.spatial import distance

if __name__ == "__main__":

	parser = argparse.ArgumentParser(description = "Nearest Neighbor Similarity Queries")

	parser.add_argument('-q', nargs=32, type=float, help = "query vector q", required=True)
	parser.add_argument('-k', type=int, help = "dimension k", required=True)

	args = parser.parse_args()
	
	# Each set of features is stored in a separate file. For each file, a line corresponds to a single image. The first value in a line is is the image ID and the subsequent values are the feature vector (e.g. color histogram, etc.) of the image.

	data = np.loadtxt('ColorHistogram-test.asc', dtype=float, usecols=range(1,33))

	#print data

	# Let us assume that it is centered, i.e. column means have been subtracted and are now equal to zero.
	a = data - np.mean(data, axis=0) # axis=0 is column

	#print data
# 	a:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

#  a - np.mean(a, axis=0):
# [[-3. -3. -3.]
#  [ 0.  0.  0.]
#  [ 3.  3.  3.]]

	#print a

	U, s, V = np.linalg.svd(a)

	print U.shape
	print V.shape

	#S = np.zeros((11, 32), dtype=float)

	S = np.diag(s)
	#print U

	#print U[:,:args.k]
	print S[:args.k,:args.k]

	#print np.allclose(a, np.dot(U, np.dot(S[:args.k,args.k], V)))

	# kk

	B = np.dot(U[:,:args.k], S[:args.k,:args.k])

	p = index.Property()

	p.dimension = args.k

	# delete cached file
	idxkd = index.Index('kd_index',properties=p)
	
	i = 0
	print B

	for x in B:
		print x
		y = np.concatenate((x, x))
		#print np.concatenate((x, x))
		print tuple(y.tolist())
		i += 1
		idxkd.insert(i, tuple(y.tolist()))

	print len(list(idxkd.nearest(tuple(m), 1)))

	#distance.euclidean((,))