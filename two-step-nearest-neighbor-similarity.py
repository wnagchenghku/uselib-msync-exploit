import numpy as np
import argparse
from rtree import index
from scipy.spatial import distance
import time

if __name__ == "__main__":

	parser = argparse.ArgumentParser(description = "Nearest Neighbor Similarity Queries")

	parser.add_argument('-q', nargs=32, type=float, help = "query vector q", required=True)
	parser.add_argument('-k', type=int, help = "dimension k", required=True)

	args = parser.parse_args()
	
	start = time.time()
	# Each set of features is stored in a separate file. For each file, a line corresponds to a single image. The first value in a line is is the image ID and the subsequent values are the feature vector (e.g. color histogram, etc.) of the image.

	data = np.loadtxt('ColorHistogram-test.asc', dtype=float, usecols=range(1,33))

	print data

	# Let us assume that it is centered, i.e. column means have been subtracted and are now equal to zero.
	a = data - np.mean(data, axis=0) # axis=0 is column

	#print a
# 	a:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

#  a - np.mean(a, axis=0):
# [[-3. -3. -3.]
#  [ 0.  0.  0.]
#  [ 3.  3.  3.]]

	#print a

	U, s, V = np.linalg.svd(a, full_matrices=False)

	print U.shape
	print V.shape

	S = np.diag(s)

	print np.allclose(a, np.dot(U, np.dot(S, V)))

	B = np.dot(U[:,:args.k], S[:args.k,:args.k])

	p = index.Property()

	p.dimension = args.k

	# delete cached file
	idxkd = index.Index('kd_index',properties=p)

	for index, x in enumerate(B):
		y = np.concatenate((x, x))
		#print np.concatenate((x, x))
		idxkd.insert(index+1, tuple(y.tolist()))


	print np.transpose(np.matrix(args.q)).shape
	print U[:,:args.k].shape
	
	#q_low_dim = np.transpose(np.matrix(args.q)).dot(U[:,:args.k]).dot(np.linalg.inv(S[:args.k,:args.k])

	low_dim_q = np.dot(np.matrix(args.q), V)

	l = low_dim_q[:,:args.k].tolist()[0]

	print l

	low_dim_target = list(idxkd.nearest(tuple(l + l), 1))

	print low_dim_target

	#print data[1:2,:] # 002917

	d = distance.euclidean(data[89:90,:],args.q)

	print d

	min_query = l - d
	max_query = l + d
	range_query = min_query.tolist() + max_query.tolist()

	print range_query

	range = list(idxkd.intersection((tuple(range_query))))

	print range

	min = float('inf')

	for x in range:
		dis = distance.euclidean(data[x-1:x,:],args.q)
		if min > dis:
			min = dis
			p_index = x

	end = time.time()
	elapsedTime = end - start

	print 'Nearest neighbor image ID', p_index

	print 'Running time in seconds', elapsedTime