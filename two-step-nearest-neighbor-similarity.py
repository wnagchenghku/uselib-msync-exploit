import numpy as np
import argparse
from rtree import index

if __name__ == "__main__":

	parser = argparse.ArgumentParser(description = "Nearest Neighbor Similarity Queries")

	parser.add_argument('-q', nargs=32, type=float, help = "query vector q", required=True)
	parser.add_argument('-k', type=int, help = "dimension k", required=True)

	args = parser.parse_args()
	
	# Each set of features is stored in a separate file. For each file, a line corresponds to a single image. The first value in a line is is the image ID and the subsequent values are the feature vector (e.g. color histogram, etc.) of the image.

	data = np.loadtxt('ColorHistogram-test.asc', dtype=float, usecols=range(1,32))

	#print data

	# Let us assume that it is centered, i.e. column means have been subtracted and are now equal to zero.
	a = data - np.mean(data, axis=0) # axis=0 is column

	print a

	U, s, V = np.linalg.svd(a)

	print U
	print s

	# To reduce the dimensionality of the data from p to k < p, select k first columns of U, and k×k upper-left part of S. Their product UkSk is the required n×k matrix containing first k PCs.

	B = np.dot(U[:,:args.k], s[:args.k,:args.k])

	p = index.Property()

	p.dimension = args.k

	idxkd = index.Index('kd_index',properties=p)
	
	i = 0

	for x in idxkd:
		i += 1
		idxkd.insert(i, x)

	U, s, V = np.linalg.svd(args.q)

	q_modofied = np.dot(U[:,:args.k], s[:args.k,:args.k])

	list(idxkd.nearest(q_modofied, 1))